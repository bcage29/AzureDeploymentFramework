{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "15712456494703994218"
    }
  },
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "T",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "vmAdminPassword": {
      "type": "secureString"
    },
    "devOpsPat": {
      "type": "secureString"
    },
    "sshPublic": {
      "type": "secureString"
    }
  },
  "functions": [],
  "variables": {
    "copy": [
      {
        "name": "frontDoor",
        "count": "[length(range(0, length(variables('frontDoorInfo'))))]",
        "input": {
          "match": "[or(equals(parameters('Global').CN, '.'), contains(parameters('Global').CN, parameters('DeploymentInfo').fd.Name))]"
        }
      }
    ],
    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
    "OMSworkspaceName": "[replace(format('{0}LogAnalytics', variables('Deployment')), '-', '')]",
    "OMSworkspaceID": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('OMSworkspaceName'))]",
    "frontDoorInfo": "[if(contains(parameters('DeploymentInfo'), 'frontDoorInfo'), parameters('DeploymentInfo').frontDoorInfo, createArray())]"
  },
  "resources": [
    {
      "condition": "[variables('frontDoor')[copyIndex()].match]",
      "copy": {
        "name": "FD",
        "count": "[length(variables('frontDoorInfo'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('dp{0}-FD-Deploy{1}', variables('Deployment'), if(equals(length(variables('frontDoorInfo')), 0), 'na', variables('frontDoorInfo')[copyIndex()].name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "frontDoorInfo": {
            "value": "[variables('frontDoorInfo')[copyIndex()]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "2819437337835943877"
            }
          },
          "parameters": {
            "Deployment": {
              "type": "string"
            },
            "DeploymentID": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            },
            "frontDoorInfo": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "Stage": {
              "type": "object"
            },
            "OMSworkspaceID": {
              "type": "string"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('F')]"
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "frontendEndpoints",
                "count": "[length(parameters('frontDoorInfo').services)]",
                "input": {
                  "name": "[concat(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].name)]",
                  "properties": {
                    "hostName": "[toLower(format('{0}-afd{1}{2}', parameters('Deployment'), parameters('frontDoorInfo').name, if(equals(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name, 'Default'), '.azurefd.net', format('-{0}.{1}', parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name, parameters('Global').DomainNameExt))))]",
                    "sessionAffinityEnabledState": "[parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].sessionAffinityEnabledState]",
                    "sessionAffinityTtlSeconds": 0
                  }
                }
              },
              {
                "name": "healthProbeSettings",
                "count": "[length(parameters('frontDoorInfo').probes)]",
                "input": {
                  "name": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].name]",
                  "properties": {
                    "path": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].ProbePath]",
                    "protocol": "Https",
                    "intervalInSeconds": 30,
                    "healthProbeMethod": "[if(contains(parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')], 'probeMethod'), parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].probeMethod, 'Head')]",
                    "enabledState": "Enabled"
                  }
                }
              },
              {
                "name": "loadBalancingSettings",
                "count": "[length(parameters('frontDoorInfo').LBSettings)]",
                "input": {
                  "name": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].name]",
                  "properties": {
                    "sampleSize": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].sampleSize]",
                    "successfulSamplesRequired": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].successfulSamplesRequired]",
                    "additionalLatencyMilliseconds": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].additionalLatencyMilliseconds]"
                  }
                }
              },
              {
                "name": "routingRules",
                "count": "[length(parameters('frontDoorInfo').services)]",
                "input": {
                  "name": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].Name]",
                  "properties": {
                    "frontendEndpoints": [
                      {
                        "id": "[resourceId('Microsoft.Network/frontdoors/frontendEndpoints', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').Name), parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
                      }
                    ],
                    "acceptedProtocols": [
                      "Http",
                      "Https"
                    ],
                    "patternsToMatch": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].patternsToMatch]",
                    "enabledState": "Enabled",
                    "routeConfiguration": {
                      "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                      "customForwardingPath": null,
                      "forwardingProtocol": "HttpsOnly",
                      "backendPool": {
                        "id": "[resourceId('Microsoft.Network/frontdoors/backendPools', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').Name), parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
                      }
                    },
                    "rulesEngine": "[if(not(contains(parameters('frontDoorInfo').services[copyIndex('routingRules')], 'rulesEngine')), null(), createObject('id', resourceId('Microsoft.Network/frontdoors/rulesengines', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').Name), parameters('frontDoorInfo').services[copyIndex('routingRules')].rulesEngine)))]"
                  }
                }
              }
            ],
            "DefaultFrontEnd": [
              {
                "name": "[format('default{0}-azurefd-net', parameters('frontDoorInfo').name)]",
                "properties": {
                  "hostName": "[toLower(format('{0}-afd{1}.azurefd.net', parameters('Deployment'), parameters('frontDoorInfo').name))]",
                  "sessionAffinityEnabledState": "Disabled",
                  "sessionAffinityTtlSeconds": 0,
                  "customHttpsConfiguration": null
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/frontDoors",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name)]",
              "location": "global",
              "properties": {
                "copy": [
                  {
                    "name": "backendPools",
                    "count": "[length(parameters('frontDoorInfo').services)]",
                    "input": {
                      "name": "[parameters('frontDoorInfo').services[copyIndex('backendPools')].Name]",
                      "properties": {
                        "backends": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-FD-BE-Deploy-{1}-{2}', parameters('Deployment'), parameters('frontDoorInfo').Name, parameters('frontDoorInfo').services[copyIndex('backendPools')].Name)), '2019-10-01').outputs.backends.value]",
                        "loadBalancingSettings": {
                          "id": "[resourceId('Microsoft.Network/frontdoors/loadBalancingSettings', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name), parameters('frontDoorInfo').services[copyIndex('backendPools')].LBSettings)]"
                        },
                        "healthProbeSettings": {
                          "id": "[resourceId('Microsoft.Network/frontdoors/healthProbeSettings', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name), parameters('frontDoorInfo').services[copyIndex('backendPools')].ProbeName)]"
                        }
                      }
                    }
                  }
                ],
                "friendlyName": "[parameters('frontDoorInfo').name]",
                "enabledState": "Enabled",
                "frontendEndpoints": "[variables('frontendEndpoints')]",
                "healthProbeSettings": "[variables('healthProbeSettings')]",
                "loadBalancingSettings": "[variables('loadBalancingSettings')]",
                "routingRules": "[variables('routingRules')]",
                "backendPoolsSettings": {
                  "enforceCertificateNameCheck": "Enabled",
                  "sendRecvTimeoutSeconds": 30
                }
              },
              "dependsOn": [
                "DNSCNAME",
                "FDServiceBE"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/frontDoors/{0}', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name))]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "logs": [
                  {
                    "category": "FrontdoorAccessLog",
                    "enabled": true
                  },
                  {
                    "category": "FrontdoorWebApplicationFirewallLog",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/frontDoors', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name))]"
              ]
            },
            {
              "condition": "[and(contains(parameters('frontDoorInfo').services[copyIndex()], 'EnableSSL'), equals(parameters('frontDoorInfo').services[copyIndex()].EnableSSL, 1))]",
              "copy": {
                "name": "SetFDServicesCertificates",
                "count": "[length(parameters('frontDoorInfo').services)]"
              },
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('SetServicesCertificates{0}-{1}', add(copyIndex(), 1), parameters('frontDoorInfo').name)]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiNetworkContributor', parameters('Deployment')))]": {}
                }
              },
              "location": "[resourceGroup().location]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "5.4",
                "arguments": "[format(' -ResourceGroupName {0} -FrontDoorName {1}-afd{2} -Name {3} -VaultID {4} -certificateUrl {5}', resourceGroup().name, parameters('Deployment'), parameters('frontDoorInfo').name, variables('frontendEndpoints')[copyIndex()].name, resourceId(parameters('Global').HubRGName, 'Microsoft.Keyvault/vaults', parameters('Global').KVName), parameters('Global').certificateUrl)]",
                "scriptContent": " \n                    param ( \n                        [string]$ResourceGroupName, \n                        [string]$FrontDoorName, \n                        [string]$Name, \n                        [string]$VaultID, \n                        [string]$certificateUrl \n                    ) \n                    \n                    try \n                    { \n                        Write-Output \"`nUTC is: \" \n                        Get-Date \n                        $c = Get-AzContext -ErrorAction stop \n                        if ($c) \n                        { \n                            Write-Output \"`nContext is: \" \n                            $c | select Account,Subscription,Tenant,Environment | fl | out-string \n\n                            $EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $FrontDoorName -Name $Name -ErrorAction stop \n                            #$EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName ACU1-BRW-AOA-RG-S1 -FrontDoorName ACU1-BRW-AOA-S1-afd01 -Name APIM01-Gateway \n                            if ($EndPoint.Vault) \n                            { \n                                Write-Output 'Provisioning CustomDomainHttp is complete!' \n                            } \n                            else \n                            { \n                                # /subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-P0/providers/Microsoft.KeyVault/vaults/ACU1-BRW-AOA-P0-kvVLT01 \n                                #  \n                                $SecretVersion = Split-Path -Path $certificateUrl -Leaf \n                                $Secret = Split-Path -Path $certificateUrl \n                                $SecretName = Split-Path -Path $Secret -Leaf \n                              \n                                Enable-AzFrontDoorCustomDomainHttps -ResourceGroupName $ResourceGroupName -FrontDoorName $FrontDoorName -FrontendEndpointName $Name -VaultId $VaultID -SecretName $SecretName -MinimumTlsVersion 1.2 -SecretVersion $SecretVersion \n                            } \n                        } \n                        else\n                        { \n                            throw 'Cannot get a context' \n                        } \n                    } \n                    catch \n                    { \n                        Write-Warning $_ \n                        Write-Warning $_.exception \n                    } \n                ",
                "forceUpdateTag": "[parameters('now')]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "timeout": "PT3M"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/frontDoors', format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').name))]"
              ]
            },
            {
              "condition": "[contains(parameters('frontDoorInfo').services[copyIndex()], 'rulesEngine')]",
              "copy": {
                "name": "FDServiceRE",
                "count": "[length(parameters('frontDoorInfo').services)]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('dp{0}-FD-RE-Deploy-{1}-{2}', parameters('Deployment'), parameters('frontDoorInfo').Name, parameters('frontDoorInfo').services[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[parameters('Deployment')]"
                  },
                  "AFDService": {
                    "value": "[parameters('frontDoorInfo').services[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "FDInfo": {
                    "value": "[parameters('frontDoorInfo')]"
                  },
                  "rules": {
                    "value": "[parameters('frontDoorInfo').rules]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "16481504736162387433"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "AFDService": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "FDInfo": {
                      "type": "object"
                    },
                    "rules": {
                      "type": "array"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "copy": {
                        "name": "RR",
                        "count": "[length(parameters('rules'))]"
                      },
                      "type": "Microsoft.Network/frontDoors/rulesEngines",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}/{1}', format('{0}-afd{1}', parameters('Deployment'), parameters('FDInfo').name), parameters('rules')[copyIndex()].name)]",
                      "properties": {
                        "rules": [
                          {
                            "name": "[parameters('rules')[copyIndex()].name]",
                            "priority": "[parameters('rules')[copyIndex()].priority]",
                            "action": "[parameters('rules')[copyIndex()].action]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "FDServiceBE",
                "count": "[length(parameters('frontDoorInfo').services)]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('dp{0}-FD-BE-Deploy-{1}-{2}', parameters('Deployment'), parameters('frontDoorInfo').Name, parameters('frontDoorInfo').services[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[parameters('Deployment')]"
                  },
                  "AFDService": {
                    "value": "[parameters('frontDoorInfo').services[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "5230019030458169947"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "AFDService": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "copy": [
                      {
                        "name": "backends",
                        "count": "[length(range(0, length(parameters('AFDService').BEAddress)))]",
                        "input": {
                          "weight": "[if(contains(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]], 'weight'), parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].weight, 100)]",
                          "address": "[replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].address, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt)]",
                          "backendHostHeader": "[if(contains(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]], 'hostheader'), replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].hostheader, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt), replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].address, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt))]",
                          "enabledState": "Enabled",
                          "httpPort": 80,
                          "httpsPort": 443,
                          "priority": 1
                        }
                      }
                    ]
                  },
                  "resources": [],
                  "outputs": {
                    "backends": {
                      "type": "array",
                      "value": "[variables('backends')]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "DNSCNAME",
                "count": "[length(parameters('frontDoorInfo').services)]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('setdnsServices-{0}-{1}', parameters('frontDoorInfo').name, parameters('frontDoorInfo').services[copyIndex()].name)]",
              "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, parameters('Global').SubscriptionID)]",
              "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('Global').GlobalRGName)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostname": {
                    "value": "[toLower(format('{0}-afd{1}{2}', parameters('Deployment'), parameters('frontDoorInfo').name, if(equals(parameters('frontDoorInfo').services[copyIndex()].Name, 'Default'), '', format('-{0}', parameters('frontDoorInfo').services[copyIndex()].Name))))]"
                  },
                  "cname": {
                    "value": "[format('{0}-afd{1}.azurefd.net', parameters('Deployment'), parameters('frontDoorInfo').name)]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "10934653432455027178"
                    }
                  },
                  "parameters": {
                    "hostname": {
                      "type": "string"
                    },
                    "cname": {
                      "type": "string"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Network/dnsZones/CNAME",
                      "apiVersion": "2018-05-01",
                      "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                      "properties": {
                        "TTL": 3600,
                        "metadata": {},
                        "CNAMERecord": {
                          "cname": "[parameters('cname')]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  ]
}